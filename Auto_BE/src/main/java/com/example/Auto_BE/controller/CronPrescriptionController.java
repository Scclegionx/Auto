package com.example.Auto_BE.controller;

import com.example.Auto_BE.dto.BaseResponse;
import com.example.Auto_BE.dto.request.PrescriptionCreateRequest;
import com.example.Auto_BE.dto.response.PrescriptionResponse;
import com.example.Auto_BE.service.CronPrescriptionService;
import jakarta.validation.Valid;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.web.bind.annotation.*;

import java.util.List;

/**
 * üéØ OPTIMIZED Prescription Controller v·ªõi TIME-BASED Scheduling
 * 
 * ‚úÖ Service t·ª± ƒë·ªông x·ª≠ l√Ω TIME-BASED scheduling
 * ‚úÖ Controller ch·ªâ focus v√†o REST API logic
 * ‚úÖ Lo·∫°i b·ªè manual scheduling endpoints
 */
@RestController
@RequestMapping("/api/cron-prescriptions")
public class CronPrescriptionController {

    private final CronPrescriptionService cronPrescriptionService;

    public CronPrescriptionController(CronPrescriptionService cronPrescriptionService) {
        this.cronPrescriptionService = cronPrescriptionService;
    }

    /**
     * T·∫°o ƒë∆°n thu·ªëc m·ªõi
     * Service t·ª± ƒë·ªông x·ª≠ l√Ω TIME-BASED scheduling
     */
    @PostMapping("/create")
    public ResponseEntity<BaseResponse<PrescriptionResponse>> createPrescription(
            @RequestBody @Valid PrescriptionCreateRequest prescriptionCreateRequest,
            Authentication authentication) {

        return ResponseEntity.ok(cronPrescriptionService.create(prescriptionCreateRequest, authentication));
    }

    /**
     * L·∫•y th√¥ng tin ƒë∆°n thu·ªëc theo ID
     */
    @GetMapping("/{prescriptionId}")
    public ResponseEntity<BaseResponse<PrescriptionResponse>> getPrescription(
            @PathVariable Long prescriptionId,
            Authentication authentication) {

        return ResponseEntity.ok(cronPrescriptionService.getById(prescriptionId, authentication));
    }

    /**
     * L·∫•y t·∫•t c·∫£ ƒë∆°n thu·ªëc c·ªßa user
     */
    @GetMapping
    public ResponseEntity<BaseResponse<List<PrescriptionResponse>>> getAllPrescriptions(
            Authentication authentication) {

        return ResponseEntity.ok(cronPrescriptionService.getAllByUser(authentication));
    }

    /**
     * C·∫≠p nh·∫≠t ƒë∆°n thu·ªëc
     * Service t·ª± ƒë·ªông x·ª≠ l√Ω TIME-BASED rescheduling
     */
    @PutMapping("/{prescriptionId}")
    public ResponseEntity<BaseResponse<PrescriptionResponse>> updatePrescription(
            @PathVariable Long prescriptionId,
            @RequestBody @Valid PrescriptionCreateRequest prescriptionUpdateRequest,
            Authentication authentication) {

        return ResponseEntity.ok(cronPrescriptionService.update(prescriptionId, prescriptionUpdateRequest, authentication));
    }

    /**
     * X√≥a ƒë∆°n thu·ªëc
     * Service t·ª± ƒë·ªông x·ª≠ l√Ω TIME-BASED rescheduling cho medications c√≤n l·∫°i
     */
    @DeleteMapping("/{prescriptionId}")
    public ResponseEntity<BaseResponse<String>> deletePrescription(
            @PathVariable Long prescriptionId,
            Authentication authentication) {

        return ResponseEntity.ok(cronPrescriptionService.delete(prescriptionId, authentication));
    }
}