#!/usr/bin/env python3
"""
API Server cho PhoBERT_SAM
X·ª≠ l√Ω Intent Recognition v√† Entity Extraction
"""

import torch
import torch.nn as nn
from transformers import AutoTokenizer, AutoModel
from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from typing import List, Dict, Optional
import uvicorn
import re
from datetime import datetime
import json
from config import model_config

# Pydantic models
class IntentRequest(BaseModel):
    text: str
    confidence_threshold: Optional[float] = 0.3

class IntentResponse(BaseModel):
    input_text: str
    intent: str
    confidence: float
    command: str
    entities: Dict[str, str]
    value: str
    processing_time: float
    timestamp: str

class SimpleIntentModel(nn.Module):
    """Model ƒë∆°n gi·∫£n cho Intent Recognition"""
    
    def __init__(self, model_name, num_intents):
        super().__init__()
        self.phobert = AutoModel.from_pretrained(model_name)
        self.dropout = nn.Dropout(0.1)
        self.classifier = nn.Linear(self.phobert.config.hidden_size, num_intents)
    
    def forward(self, input_ids, attention_mask):
        outputs = self.phobert(input_ids=input_ids, attention_mask=attention_mask)
        pooled_output = outputs.pooler_output
        pooled_output = self.dropout(pooled_output)
        logits = self.classifier(pooled_output)
        return logits

class PhoBERTAPI:
    """API class cho PhoBERT_SAM"""
    
    def __init__(self):
        self.model = None
        self.tokenizer = None
        self.id_to_intent = None
        self.intent_to_command = None
        self.device = torch.device("cpu")
        
        # Intent to Command mapping
        self.intent_to_command = {
            "call": "make_call",
            "send-mess": "send_message", 
            "set-alarm": "set_alarm",
            "check-weather": "check_weather",
            "play-media": "play_media",
            "read-news": "read_news",
            "check-health-status": "check_health",
            "set-reminder": "set_reminder",
            "general-conversation": "chat"
        }
        
        # Entity patterns
        self.entity_patterns = {
            "RECEIVER": [
                r"cho\s+(\w+)",
                r"g·ªçi\s+(\w+)", 
                r"nh·∫Øn\s+(\w+)",
                r"(\w+)\s+(?:∆°i|√†)",
                r"(?:b·ªë|m·∫π|√¥ng|b√†|anh|ch·ªã|em|con|ch√°u)"
            ],
            "TIME": [
                r"(\d{1,2}:\d{2})",
                r"(\d{1,2})\s*gi·ªù",
                r"(\d{1,2})\s*ph√∫t",
                r"(s√°ng|chi·ªÅu|t·ªëi|ƒë√™m)",
                r"(h√¥m\s+nay|ng√†y\s+mai|tu·∫ßn\s+sau)"
            ],
            "MESSAGE": [
                r"r·∫±ng\s+(.+)",
                r"n√≥i\s+(.+)",
                r"nh·∫Øn\s+(.+)",
                r"g·ª≠i\s+(.+)"
            ],
            "LOCATION": [
                r"·ªü\s+(\w+)",
                r"t·∫°i\s+(\w+)",
                r"(\w+)\s+(?:th√†nh\s+ph·ªë|t·ªânh|qu·∫≠n|huy·ªán)"
            ]
        }
    
    def load_model(self):
        """Load model ƒë√£ training"""
        try:
            print("üîÑ Loading PhoBERT model...")
            
            # Load checkpoint
            checkpoint = torch.load("models/best_simple_intent_model.pth", map_location='cpu')
            
            # T·∫°o model
            self.model = SimpleIntentModel(model_config.model_name, len(checkpoint['intent_to_id']))
            self.model.load_state_dict(checkpoint['model_state_dict'])
            self.model.eval()
            self.model.to(self.device)
            
            # Load tokenizer
            self.tokenizer = AutoTokenizer.from_pretrained(model_config.model_name)
            
            # Load mappings
            self.id_to_intent = checkpoint['id_to_intent']
            
            print(f"‚úÖ Model loaded successfully!")
            print(f"   - Validation accuracy: {checkpoint['val_acc']:.2f}%")
            print(f"   - Number of intents: {len(checkpoint['intent_to_id'])}")
            print(f"   - Available intents: {list(checkpoint['intent_to_id'].keys())}")
            
            return True
            
        except Exception as e:
            print(f"‚ùå Error loading model: {e}")
            return False
    
    def extract_entities(self, text: str) -> Dict[str, str]:
        """Extract entities t·ª´ text"""
        entities = {}
        
        for entity_type, patterns in self.entity_patterns.items():
            for pattern in patterns:
                matches = re.findall(pattern, text, re.IGNORECASE)
                if matches:
                    if entity_type == "MESSAGE":
                        # L·∫•y to√†n b·ªô message
                        entities[entity_type] = matches[0].strip()
                    else:
                        # L·∫•y entity ƒë·∫ßu ti√™n t√¨m ƒë∆∞·ª£c
                        entities[entity_type] = matches[0].strip()
                    break
        
        return entities
    
    def generate_value(self, intent: str, entities: Dict[str, str], original_text: str) -> str:
        """Generate value d·ª±a tr√™n intent v√† entities"""
        if intent == "unknown" or intent == "error":
            return "Kh√¥ng th·ªÉ x√°c ƒë·ªãnh"
        
        # T·∫°o value d·ª±a tr√™n intent v√† entities
        if intent == "call":
            receiver = entities.get("RECEIVER", "ng∆∞·ªùi nh·∫≠n")
            return f"G·ªçi ƒëi·ªán cho {receiver}"
        
        elif intent == "send-mess":
            receiver = entities.get("RECEIVER", "ng∆∞·ªùi nh·∫≠n")
            message = entities.get("MESSAGE", "tin nh·∫Øn")
            return f"G·ª≠i tin nh·∫Øn cho {receiver}: {message}"
        
        elif intent == "set-alarm":
            time_info = entities.get("TIME", "th·ªùi gian")
            return f"ƒê·∫∑t b√°o th·ª©c l√∫c {time_info}"
        
        elif intent == "set-reminder":
            time_info = entities.get("TIME", "th·ªùi gian")
            return f"ƒê·∫∑t nh·∫Øc nh·ªü l√∫c {time_info}"
        
        elif intent == "check-weather":
            location = entities.get("LOCATION", "khu v·ª±c hi·ªán t·∫°i")
            return f"Ki·ªÉm tra th·ªùi ti·∫øt t·∫°i {location}"
        
        elif intent == "play-media":
            return "Ph√°t nh·∫°c/phim"
        
        elif intent == "read-news":
            return "ƒê·ªçc tin t·ª©c"
        
        elif intent == "check-health-status":
            return "Ki·ªÉm tra t√¨nh tr·∫°ng s·ª©c kh·ªèe"
        
        elif intent == "general-conversation":
            return "Tr√≤ chuy·ªán th√¥ng th∆∞·ªùng"
        
        else:
            return f"Th·ª±c hi·ªán h√†nh ƒë·ªông: {intent}"
    
    def predict_intent(self, text: str, confidence_threshold: float = 0.3) -> Dict:
        """Predict intent v√† confidence"""
        try:
            # Tokenize
            encoding = self.tokenizer(
                text,
                truncation=True,
                padding="max_length",
                max_length=model_config.max_length,
                return_tensors="pt"
            )
            
            # Move to device
            input_ids = encoding["input_ids"].to(self.device)
            attention_mask = encoding["attention_mask"].to(self.device)
            
            # Predict
            with torch.no_grad():
                logits = self.model(input_ids, attention_mask)
                probabilities = torch.softmax(logits, dim=1)
                predicted = torch.argmax(logits, dim=1)
                confidence = probabilities.max().item()
                intent = self.id_to_intent[predicted.item()]
            
            # Check confidence threshold
            if confidence < confidence_threshold:
                intent = "unknown"
                confidence = 0.0
            
            return {
                "intent": intent,
                "confidence": confidence,
                "probabilities": probabilities.cpu().numpy().tolist()[0]
            }
            
        except Exception as e:
            print(f"‚ùå Error predicting intent: {e}")
            return {
                "intent": "error",
                "confidence": 0.0,
                "probabilities": []
            }
    
    def process_text(self, text: str, confidence_threshold: float = 0.3) -> IntentResponse:
        """X·ª≠ l√Ω text v√† tr·∫£ v·ªÅ k·∫øt qu·∫£ ƒë·∫ßy ƒë·ªß"""
        start_time = datetime.now()
        
        # Predict intent
        intent_result = self.predict_intent(text, confidence_threshold)
        
        # Extract entities
        entities = self.extract_entities(text)
        
        # Get command
        command = self.intent_to_command.get(intent_result["intent"], "unknown")
        
        # Generate value based on intent and entities
        value = self.generate_value(intent_result["intent"], entities, text)
        
        # Calculate processing time
        processing_time = (datetime.now() - start_time).total_seconds()
        
        return IntentResponse(
            input_text=text,
            intent=intent_result["intent"],
            confidence=intent_result["confidence"],
            command=command,
            entities=entities,
            value=value,
            processing_time=processing_time,
            timestamp=datetime.now().isoformat()
        )

# Initialize API
api = PhoBERTAPI()

# FastAPI app
app = FastAPI(
    title="PhoBERT_SAM API",
    description="API cho Intent Recognition v√† Entity Extraction cho ng∆∞·ªùi cao tu·ªïi",
    version="1.0.0"
)

# Add CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # Cho ph√©p t·∫•t c·∫£ origins (c√≥ th·ªÉ thay ƒë·ªïi th√†nh specific domains)
    allow_credentials=True,
    allow_methods=["*"],  # Cho ph√©p t·∫•t c·∫£ HTTP methods
    allow_headers=["*"],  # Cho ph√©p t·∫•t c·∫£ headers
)

@app.on_event("startup")
async def startup_event():
    """Kh·ªüi t·∫°o model khi server start"""
    if not api.load_model():
        raise Exception("Kh√¥ng th·ªÉ load model!")

@app.get("/")
async def root():
    """Root endpoint"""
    return {
        "message": "PhoBERT_SAM API",
        "version": "1.0.0",
        "status": "running",
        "available_intents": list(api.intent_to_command.keys()) if api.id_to_intent else []
    }

@app.get("/health")
async def health_check():
    """Health check endpoint"""
    return {
        "status": "healthy",
        "model_loaded": api.model is not None,
        "timestamp": datetime.now().isoformat()
    }

@app.post("/predict", response_model=IntentResponse)
async def predict_intent(request: IntentRequest):
    """Predict intent v√† extract entities"""
    try:
        if not api.model:
            raise HTTPException(status_code=500, detail="Model ch∆∞a ƒë∆∞·ª£c load")
        
        result = api.process_text(request.text, request.confidence_threshold)
        return result
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"L·ªói x·ª≠ l√Ω: {str(e)}")

@app.get("/intents")
async def get_intents():
    """L·∫•y danh s√°ch intents c√≥ s·∫µn"""
    if not api.id_to_intent:
        raise HTTPException(status_code=500, detail="Model ch∆∞a ƒë∆∞·ª£c load")
    
    return {
        "intents": list(api.id_to_intent.values()),
        "intent_to_command": api.intent_to_command
    }

@app.get("/entities")
async def get_entity_patterns():
    """L·∫•y patterns cho entity extraction"""
    return {
        "entity_patterns": api.entity_patterns
    }

@app.post("/batch_predict")
async def batch_predict(texts: List[str], confidence_threshold: float = 0.3):
    """Predict nhi·ªÅu texts c√πng l√∫c"""
    try:
        if not api.model:
            raise HTTPException(status_code=500, detail="Model ch∆∞a ƒë∆∞·ª£c load")
        
        results = []
        for text in texts:
            result = api.process_text(text, confidence_threshold)
            results.append(result.dict())
        
        return {
            "results": results,
            "total_processed": len(texts)
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"L·ªói x·ª≠ l√Ω batch: {str(e)}")

if __name__ == "__main__":
    print("üöÄ Starting PhoBERT_SAM API Server...")
    print("=" * 50)
    print("üìñ API Documentation: http://localhost:8000/docs")
    print("üîç Health Check: http://localhost:8000/health")
    print("üéØ Predict Endpoint: POST http://localhost:8000/predict")
    print("=" * 50)
    
    uvicorn.run(
        "api_server:app",
        host="0.0.0.0",
        port=8000,
        reload=True,
        log_level="info"
    )
