#!/usr/bin/env python3
"""
Script ƒë·ªÉ ki·ªÉm tra v√† s·ª≠a c√°c v·∫•n ƒë·ªÅ khi clone d·ª± √°n v·ªÅ m√°y kh√°c
"""

import os
import sys
import subprocess
import json
from pathlib import Path

def check_python_version():
    """Ki·ªÉm tra phi√™n b·∫£n Python"""
    print("üêç Ki·ªÉm tra phi√™n b·∫£n Python...")
    version = sys.version_info
    print(f"   Python version: {version.major}.{version.minor}.{version.micro}")
    
    if version.major < 3 or (version.major == 3 and version.minor < 8):
        print("‚ùå Python version qu√° c≈©! C·∫ßn Python 3.8+")
        return False
    else:
        print("‚úÖ Python version OK")
        return True

def check_required_packages():
    """Ki·ªÉm tra c√°c package c·∫ßn thi·∫øt"""
    print("\nüì¶ Ki·ªÉm tra c√°c package c·∫ßn thi·∫øt...")
    
    required_packages = [
        'torch',
        'transformers', 
        'sklearn',
        'seqeval',
        'tqdm',
        'numpy',
        'regex'  # Package n√†y c√≥ th·ªÉ g√¢y v·∫•n ƒë·ªÅ
    ]
    
    missing_packages = []
    
    for package in required_packages:
        try:
            if package == 'sklearn':
                import sklearn
                print(f"‚úÖ {package}: OK")
            elif package == 'regex':
                import regex
                print(f"‚úÖ {package}: OK")
            else:
                __import__(package)
                print(f"‚úÖ {package}: OK")
        except ImportError:
            print(f"‚ùå {package}: MISSING")
            missing_packages.append(package)
    
    if missing_packages:
        print(f"\n‚ùå Thi·∫øu packages: {missing_packages}")
        print("Ch·∫°y l·ªánh sau ƒë·ªÉ c√†i ƒë·∫∑t:")
        print(f"pip install {' '.join(missing_packages)}")
        return False
    else:
        print("‚úÖ T·∫•t c·∫£ packages ƒë√£ c√≥")
        return True

def check_file_structure():
    """Ki·ªÉm tra c·∫•u tr√∫c file"""
    print("\nüìÅ Ki·ªÉm tra c·∫•u tr√∫c file...")
    
    required_files = [
        'src/training/scripts/train_gpu.py',
        'src/training/configs/config.py',
        'src/data/processed/train.json',
        'src/data/processed/val.json',
        'src/data/processed/test.json',
        'models/label_maps.json'
    ]
    
    missing_files = []
    
    for file_path in required_files:
        if os.path.exists(file_path):
            print(f"‚úÖ {file_path}: OK")
        else:
            print(f"‚ùå {file_path}: MISSING")
            missing_files.append(file_path)
    
    if missing_files:
        print(f"\n‚ùå Thi·∫øu files: {missing_files}")
        return False
    else:
        print("‚úÖ T·∫•t c·∫£ files c·∫ßn thi·∫øt ƒë√£ c√≥")
        return True

def check_model_cache():
    """Ki·ªÉm tra model cache"""
    print("\nü§ñ Ki·ªÉm tra model cache...")
    
    cache_paths = [
        'model_cache',
        'model_cache/models--vinai--phobert-base',
        'model_cache/models--vinai--phobert-large'
    ]
    
    missing_cache = []
    
    for cache_path in cache_paths:
        if os.path.exists(cache_path):
            print(f"‚úÖ {cache_path}: OK")
        else:
            print(f"‚ùå {cache_path}: MISSING")
            missing_cache.append(cache_path)
    
    if missing_cache:
        print(f"\n‚ùå Thi·∫øu model cache: {missing_cache}")
        print("C·∫ßn t·∫£i model cache ho·∫∑c cho ph√©p download online")
        return False
    else:
        print("‚úÖ Model cache OK")
        return True

def check_data_files():
    """Ki·ªÉm tra data files"""
    print("\nüìä Ki·ªÉm tra data files...")
    
    data_files = [
        'src/data/processed/train.json',
        'src/data/processed/val.json', 
        'src/data/processed/test.json'
    ]
    
    for data_file in data_files:
        if os.path.exists(data_file):
            try:
                with open(data_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                print(f"‚úÖ {data_file}: OK ({len(data)} samples)")
            except Exception as e:
                print(f"‚ùå {data_file}: CORRUPTED - {e}")
                return False
        else:
            print(f"‚ùå {data_file}: MISSING")
            return False
    
    print("‚úÖ Data files OK")
    return True

def fix_import_issues():
    """S·ª≠a c√°c v·∫•n ƒë·ªÅ import"""
    print("\nüîß S·ª≠a c√°c v·∫•n ƒë·ªÅ import...")
    
    train_gpu_path = 'src/training/scripts/train_gpu.py'
    
    if not os.path.exists(train_gpu_path):
        print(f"‚ùå Kh√¥ng t√¨m th·∫•y {train_gpu_path}")
        return False
    
    # ƒê·ªçc file
    with open(train_gpu_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # S·ª≠a import regex th√†nh re
    if 'import regex' in content:
        content = content.replace('import regex', 'import re as regex')
        print("‚úÖ ƒê√£ s·ª≠a import regex")
    
    # S·ª≠a ƒë∆∞·ªùng d·∫´n model cache
    if '../../model_cache' in content:
        content = content.replace('../../model_cache', 'model_cache')
        print("‚úÖ ƒê√£ s·ª≠a ƒë∆∞·ªùng d·∫´n model cache")
    
    # Ghi l·∫°i file
    with open(train_gpu_path, 'w', encoding='utf-8') as f:
        f.write(content)
    
    print("‚úÖ ƒê√£ s·ª≠a c√°c v·∫•n ƒë·ªÅ import")
    return True

def create_setup_script():
    """T·∫°o script setup cho m√°y m·ªõi"""
    print("\nüìù T·∫°o script setup...")
    
    setup_content = '''#!/usr/bin/env python3
"""
Script setup cho m√°y m·ªõi
"""

import subprocess
import sys
import os

def install_requirements():
    """C√†i ƒë·∫∑t requirements"""
    print("üì¶ C√†i ƒë·∫∑t requirements...")
    
    requirements = [
        'torch>=1.9.0',
        'transformers>=4.20.0',
        'scikit-learn>=1.0.0',
        'seqeval>=1.2.0',
        'tqdm>=4.60.0',
        'numpy>=1.21.0',
        'regex>=2021.0.0',
        'fastapi>=0.70.0',
        'uvicorn>=0.15.0'
    ]
    
    for req in requirements:
        try:
            subprocess.check_call([sys.executable, '-m', 'pip', 'install', req])
            print(f"‚úÖ ƒê√£ c√†i {req}")
        except subprocess.CalledProcessError:
            print(f"‚ùå L·ªói c√†i {req}")

def download_models():
    """T·∫£i models"""
    print("ü§ñ T·∫£i models...")
    
    try:
        from transformers import AutoTokenizer, AutoModel
        
        # T·∫£i PhoBERT base
        print("T·∫£i PhoBERT base...")
        tokenizer = AutoTokenizer.from_pretrained("vinai/phobert-base")
        model = AutoModel.from_pretrained("vinai/phobert-base")
        
        # T·∫£i PhoBERT large
        print("T·∫£i PhoBERT large...")
        tokenizer = AutoTokenizer.from_pretrained("vinai/phobert-large")
        model = AutoModel.from_pretrained("vinai/phobert-large")
        
        print("‚úÖ ƒê√£ t·∫£i models")
        
    except Exception as e:
        print(f"‚ùå L·ªói t·∫£i models: {e}")

def main():
    print("üöÄ Setup cho m√°y m·ªõi...")
    
    # T·∫°o th∆∞ m·ª•c c·∫ßn thi·∫øt
    os.makedirs('model_cache', exist_ok=True)
    os.makedirs('models', exist_ok=True)
    os.makedirs('logs', exist_ok=True)
    
    # C√†i ƒë·∫∑t requirements
    install_requirements()
    
    # T·∫£i models
    download_models()
    
    print("‚úÖ Setup ho√†n th√†nh!")

if __name__ == "__main__":
    main()
'''
    
    with open('setup_new_machine.py', 'w', encoding='utf-8') as f:
        f.write(setup_content)
    
    print("‚úÖ ƒê√£ t·∫°o setup_new_machine.py")

def main():
    """Main function"""
    print("üîç Ki·ªÉm tra d·ª± √°n Auto_NLP cho m√°y m·ªõi...")
    print("=" * 50)
    
    all_ok = True
    
    # Ki·ªÉm tra Python version
    if not check_python_version():
        all_ok = False
    
    # Ki·ªÉm tra packages
    if not check_required_packages():
        all_ok = False
    
    # Ki·ªÉm tra file structure
    if not check_file_structure():
        all_ok = False
    
    # Ki·ªÉm tra model cache
    if not check_model_cache():
        all_ok = False
    
    # Ki·ªÉm tra data files
    if not check_data_files():
        all_ok = False
    
    # S·ª≠a import issues
    if not fix_import_issues():
        all_ok = False
    
    # T·∫°o setup script
    create_setup_script()
    
    print("\n" + "=" * 50)
    if all_ok:
        print("‚úÖ T·∫•t c·∫£ ki·ªÉm tra ƒë·ªÅu OK! D·ª± √°n s·∫µn s√†ng ƒë·ªÉ training.")
    else:
        print("‚ùå C√≥ m·ªôt s·ªë v·∫•n ƒë·ªÅ c·∫ßn s·ª≠a. Ch·∫°y setup_new_machine.py ƒë·ªÉ t·ª± ƒë·ªông s·ª≠a.")
    
    print("\nüìã H∆∞·ªõng d·∫´n cho m√°y m·ªõi:")
    print("1. Ch·∫°y: python setup_new_machine.py")
    print("2. Ch·∫°y: python src/training/scripts/train_gpu.py")
    print("3. N·∫øu v·∫´n l·ªói, ki·ªÉm tra log ƒë·ªÉ debug")

if __name__ == "__main__":
    main()
