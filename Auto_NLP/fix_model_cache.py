#!/usr/bin/env python3
"""
Script fix nhanh cho v·∫•n ƒë·ªÅ model cache
"""

import subprocess
import sys
import os

def fix_pytorch_vulnerability():
    """Fix PyTorch vulnerability"""
    print("üîß Fix PyTorch vulnerability...")
    
    try:
        # Upgrade PyTorch
        subprocess.check_call([sys.executable, '-m', 'pip', 'install', 'torch>=2.6.0', '--upgrade'])
        print("‚úÖ PyTorch upgraded to 2.6.0+")
        return True
    except Exception as e:
        print(f"‚ùå L·ªói upgrade PyTorch: {e}")
        return False

def force_download_model():
    """Force download model"""
    print("üîÑ Force download PhoBERT-large...")
    
    try:
        from transformers import AutoTokenizer, AutoModel
        
        # X√≥a cache c≈© n·∫øu c√≥
        cache_path = "model_cache/models--vinai--phobert-large"
        if os.path.exists(cache_path):
            import shutil
            shutil.rmtree(cache_path)
            print("üóëÔ∏è ƒê√£ x√≥a cache c≈©")
        
        # Download l·∫°i
        print("T·∫£i tokenizer...")
        tokenizer = AutoTokenizer.from_pretrained(
            "vinai/phobert-large",
            force_download=True,
            cache_dir="model_cache"
        )
        
        print("T·∫£i model...")
        model = AutoModel.from_pretrained(
            "vinai/phobert-large", 
            force_download=True,
            cache_dir="model_cache"
        )
        
        print("‚úÖ Model downloaded successfully")
        
        # Test
        test_text = "Xin ch√†o"
        tokens = tokenizer(test_text, return_tensors="pt")
        print(f"‚úÖ Test OK: '{test_text}' -> {tokens['input_ids'].shape}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå L·ªói download model: {e}")
        return False

def main():
    print("üöÄ Fix model cache issues...")
    print("=" * 40)
    
    # Fix PyTorch
    pytorch_ok = fix_pytorch_vulnerability()
    
    if pytorch_ok:
        # Force download model
        model_ok = force_download_model()
        
        if model_ok:
            print("\n‚úÖ Fix ho√†n th√†nh!")
            print("B√¢y gi·ªù c√≥ th·ªÉ ch·∫°y training:")
            print("python src/training/scripts/train_gpu.py")
        else:
            print("\n‚ùå Fix th·∫•t b·∫°i - kh√¥ng th·ªÉ download model")
    else:
        print("\n‚ùå Fix th·∫•t b·∫°i - kh√¥ng th·ªÉ upgrade PyTorch")

if __name__ == "__main__":
    main()
