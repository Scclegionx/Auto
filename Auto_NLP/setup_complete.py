#!/usr/bin/env python3
"""
Script setup ho√†n ch·ªânh cho ng∆∞·ªùi m·ªõi clone d·ª± √°n v·ªÅ m√°y m·ªõi
Gi·∫£i quy·∫øt t·∫•t c·∫£ v·∫•n ƒë·ªÅ th∆∞·ªùng g·∫∑p khi setup l·∫ßn ƒë·∫ßu
"""

import os
import sys
import subprocess
import shutil
import warnings
from pathlib import Path

def print_step(step, description):
    """Print step with formatting"""
    print(f"\n{'='*60}")
    print(f"B∆Ø·ªöC {step}: {description}")
    print('='*60)

def run_command(cmd, description=""):
    """Run command with error handling"""
    if description:
        print(f"üîÑ {description}")
    
    try:
        result = subprocess.run(cmd, shell=True, check=True, capture_output=True, text=True)
        print(f"‚úÖ Th√†nh c√¥ng: {description}")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå L·ªói: {description}")
        print(f"   Error: {e.stderr}")
        return False

def check_python_version():
    """Check Python version"""
    print_step(1, "KI·ªÇM TRA PYTHON VERSION")
    
    version = sys.version_info
    print(f"Python version: {version.major}.{version.minor}.{version.micro}")
    
    if version.major < 3 or (version.major == 3 and version.minor < 8):
        print("‚ùå C·∫ßn Python 3.8+ ƒë·ªÉ ch·∫°y d·ª± √°n")
        return False
    
    print("‚úÖ Python version OK")
    return True

def create_virtual_environment():
    """Create virtual environment"""
    print_step(2, "T·∫†O VIRTUAL ENVIRONMENT")
    
    venv_path = Path("venv_new")
    
    if venv_path.exists():
        print("üóëÔ∏è X√≥a venv c≈©...")
        shutil.rmtree(venv_path)
    
    print("üì¶ T·∫°o venv m·ªõi...")
    if not run_command("python -m venv venv_new", "T·∫°o virtual environment"):
        return False
    
    return True

def install_packages():
    """Install required packages"""
    print_step(3, "C√ÄI ƒê·∫∂T PACKAGES")
    
    # Suppress warnings
    warnings.filterwarnings("ignore")
    
    packages = [
        "torch>=2.5.0 --index-url https://download.pytorch.org/whl/cu121",
        "transformers>=4.20.0",
        "scikit-learn>=1.0.0", 
        "seqeval>=1.2.0",
        "tqdm>=4.60.0",
        "numpy>=1.21.0",
        "regex>=2021.0.0",
        "fastapi>=0.70.0",
        "uvicorn>=0.15.0",
        "pydantic>=2.0.0"
    ]
    
    for package in packages:
        cmd = f"venv_new\\Scripts\\pip install {package}"
        if not run_command(cmd, f"C√†i ƒë·∫∑t {package.split()[0]}"):
            return False
    
    return True

def clear_model_cache():
    """Clear model cache"""
    print_step(4, "X√ìA MODEL CACHE C≈®")
    
    cache_paths = [
        Path.home() / ".cache" / "huggingface",
        Path("model_cache"),
        Path("models")
    ]
    
    for cache_path in cache_paths:
        if cache_path.exists():
            print(f"üóëÔ∏è X√≥a cache: {cache_path}")
            shutil.rmtree(cache_path, ignore_errors=True)
    
    return True

def download_models():
    """Download models"""
    print_step(5, "T·∫¢I MODEL PHOBERT-LARGE")
    
    # Create test script
    test_script = """
import warnings
warnings.filterwarnings("ignore")

try:
    from transformers import AutoTokenizer, AutoModel
    import torch
    
    print("üì• ƒêang t·∫£i PhoBERT-large...")
    
    # Download tokenizer
    tokenizer = AutoTokenizer.from_pretrained(
        "vinai/phobert-large",
        cache_dir="model_cache",
        force_download=True
    )
    
    # Download model  
    model = AutoModel.from_pretrained(
        "vinai/phobert-large", 
        cache_dir="model_cache",
        force_download=True
    )
    
    # Test loading
    test_text = "Xin ch√†o"
    inputs = tokenizer(test_text, return_tensors="pt")
    outputs = model(**inputs)
    
    print("‚úÖ Model t·∫£i th√†nh c√¥ng!")
    print(f"   - Tokenizer: {type(tokenizer).__name__}")
    print(f"   - Model: {type(model).__name__}")
    print(f"   - Output shape: {outputs.last_hidden_state.shape}")
    
except Exception as e:
    print(f"‚ùå L·ªói t·∫£i model: {e}")
    exit(1)
"""
    
    # Write and run test script
    with open("test_model_download.py", "w", encoding="utf-8") as f:
        f.write(test_script)
    
    success = run_command("venv_new\\Scripts\\python test_model_download.py", "T·∫£i v√† test model")
    
    # Cleanup
    if os.path.exists("test_model_download.py"):
        os.remove("test_model_download.py")
    
    return success

def test_training_script():
    """Test training script"""
    print_step(6, "KI·ªÇM TRA TRAINING SCRIPT")
    
    # Check if training script exists
    train_script = Path("src/training/scripts/train_gpu.py")
    if not train_script.exists():
        print("‚ùå Kh√¥ng t√¨m th·∫•y train_gpu.py")
        return False
    
    print("‚úÖ Training script t·ªìn t·∫°i")
    
    # Test imports
    test_imports = """
try:
    import torch
    import transformers
    from transformers import AutoTokenizer, AutoModel
    print("‚úÖ All imports OK")
    print(f"PyTorch: {torch.__version__}")
    print(f"CUDA: {torch.cuda.is_available()}")
except Exception as e:
    print(f"‚ùå Import error: {e}")
    exit(1)
"""
    
    with open("test_imports.py", "w", encoding="utf-8") as f:
        f.write(test_imports)
    
    success = run_command("venv_new\\Scripts\\python test_imports.py", "Test imports")
    
    # Cleanup
    if os.path.exists("test_imports.py"):
        os.remove("test_imports.py")
    
    return success

def create_setup_guide():
    """Create setup guide"""
    print_step(7, "T·∫†O H∆Ø·ªöNG D·∫™N SETUP")
    
    guide_content = """# H∆Ø·ªöNG D·∫™N SETUP CHO NG∆Ø·ªúI M·ªöI

## üöÄ Setup t·ª± ƒë·ªông (Khuy·∫øn ngh·ªã)
```bash
python setup_complete.py
```

## üìã Setup th·ªß c√¥ng

### 1. T·∫°o virtual environment
```bash
python -m venv venv_new
venv_new\\Scripts\\activate
```

### 2. C√†i ƒë·∫∑t packages
```bash
pip install torch>=2.5.0 --index-url https://download.pytorch.org/whl/cu121
pip install transformers>=4.20.0 scikit-learn>=1.0.0 seqeval>=1.2.0 tqdm>=4.60.0 numpy>=1.21.0 regex>=2021.0.0 fastapi>=0.70.0 uvicorn>=0.15.0 pydantic>=2.0.0
```

### 3. T·∫£i model
```bash
python -c "from transformers import AutoTokenizer, AutoModel; AutoTokenizer.from_pretrained('vinai/phobert-large'); AutoModel.from_pretrained('vinai/phobert-large')"
```

### 4. Training
```bash
python src/training/scripts/train_gpu.py
```

## üîß Troubleshooting

### L·ªói: 'NoneType' object has no attribute 'endswith'
```bash
# X√≥a cache v√† t·∫£i l·∫°i
rmdir /s model_cache
python -c "from transformers import AutoTokenizer, AutoModel; AutoTokenizer.from_pretrained('vinai/phobert-large', force_download=True); AutoModel.from_pretrained('vinai/phobert-large', force_download=True)"
```

### L·ªói import trong IDE
1. Ch·ªçn interpreter: `.\venv_new\Scripts\python.exe`
2. Restart IDE
3. Ch·ªù IDE index packages

### L·ªói CUDA
- ƒê·∫£m b·∫£o c√≥ GPU NVIDIA
- C√†i ƒë·∫∑t CUDA toolkit
- Ki·ªÉm tra: `python -c "import torch; print(torch.cuda.is_available())"`

## üìû H·ªó tr·ª£
N·∫øu g·∫∑p v·∫•n ƒë·ªÅ, ch·∫°y:
```bash
python setup_complete.py
```
"""
    
    with open("SETUP_GUIDE.md", "w", encoding="utf-8") as f:
        f.write(guide_content)
    
    print("‚úÖ ƒê√£ t·∫°o SETUP_GUIDE.md")
    return True

def main():
    """Main setup function"""
    print("üöÄ AUTO NLP - SETUP CHO NG∆Ø·ªúI M·ªöI")
    print("=" * 60)
    print("Script n√†y s·∫Ω setup ho√†n ch·ªânh d·ª± √°n cho ng∆∞·ªùi m·ªõi clone v·ªÅ")
    print("=" * 60)
    
    steps = [
        check_python_version,
        create_virtual_environment, 
        install_packages,
        clear_model_cache,
        download_models,
        test_training_script,
        create_setup_guide
    ]
    
    for i, step_func in enumerate(steps, 1):
        if not step_func():
            print(f"\n‚ùå B∆Ø·ªöC {i} TH·∫§T B·∫†I!")
            print("Vui l√≤ng ki·ªÉm tra l·ªói v√† th·ª≠ l·∫°i")
            return False
    
    print("\n" + "="*60)
    print("üéâ SETUP HO√ÄN TH√ÄNH TH√ÄNH C√îNG!")
    print("="*60)
    print("\nüìã B∆Ø·ªöC TI·∫æP THEO:")
    print("1. Activate virtual environment:")
    print("   venv_new\\Scripts\\activate")
    print("\n2. Ch·∫°y training:")
    print("   python src/training/scripts/train_gpu.py")
    print("\n3. Ho·∫∑c ch·∫°y API:")
    print("   python api/server.py")
    print("\nüìñ Xem h∆∞·ªõng d·∫´n chi ti·∫øt: SETUP_GUIDE.md")
    
    return True

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)