#!/usr/bin/env python3
"""
Script setup cho m√°y m·ªõi
"""

import subprocess
import sys
import os

def install_requirements():
    """C√†i ƒë·∫∑t requirements"""
    print("üì¶ C√†i ƒë·∫∑t requirements...")
    
    requirements = [
        'torch>=1.9.0',
        'transformers>=4.20.0',
        'scikit-learn>=1.0.0',
        'seqeval>=1.2.0',
        'tqdm>=4.60.0',
        'numpy>=1.21.0',
        'regex>=2021.0.0',
        'fastapi>=0.70.0',
        'uvicorn>=0.15.0'
    ]
    
    for req in requirements:
        try:
            subprocess.check_call([sys.executable, '-m', 'pip', 'install', req])
            print(f"‚úÖ ƒê√£ c√†i {req}")
        except subprocess.CalledProcessError:
            print(f"‚ùå L·ªói c√†i {req}")

def download_models():
    """T·∫£i models"""
    print("ü§ñ T·∫£i models...")
    
    try:
        from transformers import AutoTokenizer, AutoModel
        
        # T·∫£i PhoBERT base
        print("T·∫£i PhoBERT base...")
        tokenizer = AutoTokenizer.from_pretrained("vinai/phobert-base")
        model = AutoModel.from_pretrained("vinai/phobert-base")
        
        # T·∫£i PhoBERT large
        print("T·∫£i PhoBERT large...")
        tokenizer = AutoTokenizer.from_pretrained("vinai/phobert-large")
        model = AutoModel.from_pretrained("vinai/phobert-large")
        
        print("‚úÖ ƒê√£ t·∫£i models")
        
    except Exception as e:
        print(f"‚ùå L·ªói t·∫£i models: {e}")

def main():
    print("üöÄ Setup cho m√°y m·ªõi...")
    
    # T·∫°o th∆∞ m·ª•c c·∫ßn thi·∫øt
    os.makedirs('model_cache', exist_ok=True)
    os.makedirs('models', exist_ok=True)
    os.makedirs('logs', exist_ok=True)
    
    # C√†i ƒë·∫∑t requirements
    install_requirements()
    
    # T·∫£i models
    download_models()
    
    print("‚úÖ Setup ho√†n th√†nh!")

if __name__ == "__main__":
    main()
