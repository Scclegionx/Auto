import json
import random
import re
from typing import List, Dict
import os
from pathlib import Path

class DatasetExpander:
    def __init__(self, original_file: str = "elderly_command_dataset_reduced.json"):
        # ƒê·∫£m b·∫£o path ƒë√∫ng
        data_dir = Path(__file__).parent.parent / "raw"
        self.original_file = data_dir / original_file
        self.expanded_file = data_dir / "elderly_command_dataset_expanded.json"
        
    def load_original_data(self) -> List[Dict]:
        try:
            with open(self.original_file, 'r', encoding='utf-8') as f:
                data = json.load(f)
            print(f"üìÇ Loaded {len(data)} samples from {self.original_file}")
            return data
        except FileNotFoundError:
            print(f"‚ùå File not found: {self.original_file}")
            print("üîß Please check the file path and try again")
            return []
        except json.JSONDecodeError as e:
            print(f"‚ùå JSON decode error: {e}")
            return []
        except Exception as e:
            print(f"‚ùå Error loading data: {e}")
            return []
    
    def expand_dataset(self, target_size: int = 1000) -> List[Dict]:
        original_data = self.load_original_data()
        current_size = len(original_data)
        
        if current_size >= target_size:
            print(f"‚úÖ Dataset already has {current_size} samples, no expansion needed")
            return original_data
        
        print(f"üöÄ Expanding dataset from {current_size} to {target_size} samples")
        print(f"üìä Need to generate {target_size - current_size} additional samples")

        command_counts = {}
        for item in original_data:
            command = item['command']
            command_counts[command] = command_counts.get(command, 0) + 1
        
        for command, count in sorted(command_counts.items()):
            print(f"   {command}: {count} samples")

        total_needed = target_size - current_size
        expanded_data = original_data.copy()
        
        augmented_samples = self.augment_existing_samples(original_data, total_needed // 2)
        expanded_data.extend(augmented_samples)
        
        remaining_needed = target_size - len(expanded_data)
        if remaining_needed > 0:
            new_samples = self.generate_new_samples(original_data, remaining_needed)
            expanded_data.extend(new_samples)
        
        random.shuffle(expanded_data)
        
        print(f"‚úÖ Expanded dataset to {len(expanded_data)} samples")
        return expanded_data
    
    def augment_existing_samples(self, data: List[Dict], num_samples: int) -> List[Dict]:
        """Augment existing samples b·∫±ng c√°ch thay ƒë·ªïi t·ª´ ng·ªØ"""
        augmented = []
        
        # ========================================
        # AUGMENTATION TEMPLATES BY COMMAND TYPE
        # ========================================
        
        # Intent mapping ƒë·ªÉ tr√°nh l·∫∑p l·∫°i
        intent_mapping = {
            'make-call': 'call',
            'send-message': 'send-mess',
            'make-video-call': 'make-video-call'
        }
        
        # Function ƒë·ªÉ x·ª≠ l√Ω intent mapping
        def process_intent_mapping(intent):
            # Ki·ªÉm tra mapping tr∆∞·ªõc
            if intent in intent_mapping:
                return intent_mapping[intent]
            return intent
        
        augmentation_templates = {
            # ===== CALL COMMANDS =====
            'call': [
                'G·ªçi ƒëi·ªán cho {person}',
                'Th·ª±c hi·ªán cu·ªôc g·ªçi ƒë·∫øn {person}',
                'Li√™n l·∫°c v·ªõi {person} qua ƒëi·ªán tho·∫°i',
                'G·ªçi {person} ngay b√¢y gi·ªù',
                'Th·ª±c hi·ªán cu·ªôc g·ªçi cho {person}',
                'G·ªçi cho {person} l√∫c {time}',
                'G·ªçi ƒëi·ªán tho·∫°i cho {person}',
                'G·ªçi {person} kh·∫©n c·∫•p'
            ],
            'make-video-call': [
                'G·ªçi video cho {person}',
                'Th·ª±c hi·ªán cu·ªôc g·ªçi video ƒë·∫øn {person}',
                'G·ªçi FaceTime v·ªõi {person}',
                'G·ªçi video {person} ngay b√¢y gi·ªù',
                'Th·ª±c hi·ªán cu·ªôc g·ªçi video cho {person}',
                'G·ªçi video cho {person} l√∫c {time}',
                'G·ªçi video {person} kh·∫©n c·∫•p'
            ],
            
            # ===== MESSAGE COMMANDS =====
            'send-mess': [
                'Nh·∫Øn tin cho {person} r·∫±ng {message}',
                'G·ª≠i tin nh·∫Øn cho {person} n·ªôi dung {message}',
                'So·∫°n tin nh·∫Øn g·ª≠i {person} v·ªõi n·ªôi dung {message}',
                'Vi·∫øt tin nh·∫Øn cho {person} v·ªÅ {message}',
                'G·ª≠i cho {person} tin nh·∫Øn {message}',
                'Nh·∫Øn tin cho {person} l√† {message}',
                'G·ª≠i tin nh·∫Øn cho {person} r·∫±ng {message}',
                'So·∫°n tin cho {person} n·ªôi dung {message}'
            ],
            
            # ===== SEARCH COMMANDS =====
            'search-content': [
                'T√¨m ki·∫øm {query}',
                'T√¨m th√¥ng tin v·ªÅ {query}',
                'Tra c·ª©u {query}',
                'T√¨m hi·ªÉu v·ªÅ {query}',
                'T√¨m ki·∫øm th√¥ng tin {query}',
                'T√¨m {query} tr√™n internet',
                'Tra c·ª©u th√¥ng tin {query}',
                'T√¨m ki·∫øm {query} tr√™n m·∫°ng'
            ],
            'search-internet': [
                'T√¨m ki·∫øm {query}',
                'T√¨m th√¥ng tin v·ªÅ {query}',
                'Tra c·ª©u {query}',
                'T√¨m hi·ªÉu v·ªÅ {query}',
                'T√¨m ki·∫øm th√¥ng tin {query}',
                'T√¨m {query} tr√™n internet',
                'Tra c·ª©u th√¥ng tin {query}',
                'T√¨m ki·∫øm {query} tr√™n m·∫°ng'
            ],
            
            # ===== MEDIA COMMANDS =====
            'play-content': [
                'Ph√°t {content}',
                'B·∫≠t {content}',
                'M·ªü {content}',
                'Ch·∫°y {content}',
                'Xem {content}',
                'Ph√°t {content} ngay b√¢y gi·ªù',
                'B·∫≠t {content} cho t√¥i',
                'M·ªü {content} ƒë·ªÉ xem'
            ],
            'play-media': [
                'Ph√°t {content}',
                'B·∫≠t {content}',
                'M·ªü {content}',
                'Ch·∫°y {content}',
                'Xem {content}',
                'Ph√°t {content} ngay b√¢y gi·ªù',
                'B·∫≠t {content} cho t√¥i',
                'M·ªü {content} ƒë·ªÉ xem'
            ],
            'play-audio': [
                'Ph√°t {content}',
                'B·∫≠t {content}',
                'M·ªü {content}',
                'Ch·∫°y {content}',
                'Nghe {content}',
                'Ph√°t {content} ngay b√¢y gi·ªù',
                'B·∫≠t {content} cho t√¥i',
                'M·ªü {content} ƒë·ªÉ nghe'
            ],
            
            # ===== REMINDER COMMANDS =====
            'set-reminder': [
                'ƒê·∫∑t nh·∫Øc nh·ªü {reminder}',
                'T·∫°o l·ªùi nh·∫Øc {reminder}',
                'ƒê·∫∑t l·ªãch nh·∫Øc {reminder}',
                'T·∫°o nh·∫Øc nh·ªü cho {reminder}',
                'ƒê·∫∑t b√°o th·ª©c cho {reminder}',
                'Nh·∫Øc nh·ªü {reminder}',
                'ƒê·∫∑t nh·∫Øc nh·ªü {reminder} l√∫c {time}',
                'T·∫°o l·ªùi nh·∫Øc {reminder} cho t√¥i'
            ],
            'set-alarm': [
                'ƒê·∫∑t b√°o th·ª©c {time}',
                'T·∫°o b√°o th·ª©c {time}',
                'ƒê·∫∑t chu√¥ng b√°o th·ª©c {time}',
                'B√°o th·ª©c {time}',
                'ƒê·∫∑t b√°o th·ª©c cho {time}',
                'T·∫°o b√°o th·ª©c cho {time}',
                'ƒê·∫∑t chu√¥ng {time}',
                'B√°o th·ª©c l√∫c {time}'
            ],
            
            # ===== CHECK COMMANDS =====
            'check-weather': [
                'Ki·ªÉm tra th·ªùi ti·∫øt h√¥m nay',
                'Xem d·ª± b√°o th·ªùi ti·∫øt',
                'Th·ªùi ti·∫øt nh∆∞ th·∫ø n√†o',
                'Nhi·ªát ƒë·ªô h√¥m nay bao nhi√™u',
                'Ki·ªÉm tra th·ªùi ti·∫øt',
                'Xem th·ªùi ti·∫øt h√¥m nay',
                'D·ª± b√°o th·ªùi ti·∫øt',
                'Th·ªùi ti·∫øt h√¥m nay ra sao'
            ],
            'check-messages': [
                'Ki·ªÉm tra tin nh·∫Øn t·ª´ {person}',
                'Xem tin nh·∫Øn m·ªõi',
                'ƒê·ªçc tin nh·∫Øn ch∆∞a ƒë·ªçc',
                'Ki·ªÉm tra h·ªôp th∆∞',
                'Xem tin nh·∫Øn',
                'Ki·ªÉm tra tin nh·∫Øn',
                'ƒê·ªçc tin nh·∫Øn',
                'Xem tin nh·∫Øn m·ªõi nh·∫•t'
            ],
            'check-device-status': [
                'Ki·ªÉm tra tr·∫°ng th√°i thi·∫øt b·ªã',
                'Xem tr·∫°ng th√°i ƒëi·ªán tho·∫°i',
                'Ki·ªÉm tra pin ƒëi·ªán tho·∫°i',
                'Xem dung l∆∞·ª£ng b·ªô nh·ªõ',
                'Ki·ªÉm tra k·∫øt n·ªëi m·∫°ng',
                'Xem tr·∫°ng th√°i thi·∫øt b·ªã',
                'Ki·ªÉm tra thi·∫øt b·ªã',
                'Xem th√¥ng tin thi·∫øt b·ªã'
            ],
            'check-health-status': [
                'Ki·ªÉm tra s·ª©c kh·ªèe',
                'Xem t√¨nh tr·∫°ng s·ª©c kh·ªèe',
                'Ki·ªÉm tra nh·ªãp tim',
                'Xem ch·ªâ s·ªë s·ª©c kh·ªèe',
                'Ki·ªÉm tra huy·∫øt √°p',
                'Xem t√¨nh tr·∫°ng s·ª©c kh·ªèe',
                'Ki·ªÉm tra s·ª©c kh·ªèe h√¥m nay',
                'Xem b√°o c√°o s·ª©c kh·ªèe'
            ]
        }
        
        # ===== DATA TEMPLATES =====
        persons = [
            'ch√°u V∆∞∆°ng', 'ch·ªã H∆∞∆°ng', 'anh Nam', 'b√† n·ªôi', '√¥ng n·ªôi', 'm·∫π', 'b·ªë', 
            'em g√°i', 'anh trai', 'con trai', 'con g√°i', 'ch√°u trai', 'ch√°u g√°i',
            'b√† ngo·∫°i', '√¥ng ngo·∫°i', 'ch√∫', 'b√°c', 'c√¥', 'd√¨', 'd∆∞·ª£ng', 'm·ª£',
            'anh r·ªÉ', 'ch·ªã d√¢u', 'em r·ªÉ', 'em d√¢u', 'ch√°u n·ªôi', 'ch√°u ngo·∫°i'
        ]
        
        messages = [
            'chi·ªÅu n√†y ƒë√≥n b√† t·∫°i c√¥ng vi√™n Th·ªëng nh·∫•t l√∫c 16h chi·ªÅu',
            's√°ng mai c√≥ h·∫πn b√°c sƒ©',
            't·ªëi nay v·ªÅ mu·ªôn',
            'ƒë√£ nh·∫≠n ƒë∆∞·ª£c tin nh·∫Øn',
            'nh·ªõ u·ªëng thu·ªëc ƒë√∫ng gi·ªù',
            'c√≥ vi·ªác g·∫•p c·∫ßn li√™n l·∫°c',
            't·ªëi nay s·∫Ω v·ªÅ s·ªõm',
            's√°ng mai ƒëi ch·ª£',
            'chi·ªÅu nay c√≥ h·∫πn b·∫°n',
            't·ªëi nay ƒÉn c∆°m ·ªü nh√†',
            's√°ng mai ƒëi kh√°m b·ªánh',
            'chi·ªÅu nay ƒë√≥n ch√°u ·ªü tr∆∞·ªùng',
            't·ªëi nay xem phim c√πng nhau',
            's√°ng mai ƒëi ch√πa',
            'chi·ªÅu nay ƒëi d·∫°o c√¥ng vi√™n'
        ]
        
        queries = [
            'c√°ch n·∫•u ph·ªü', 'th·ªùi ti·∫øt h√¥m nay', 'tin t·ª©c m·ªõi nh·∫•t', 'c√¥ng th·ª©c l√†m b√°nh',
            'ƒë·ªãa ch·ªâ b·ªánh vi·ªán', 'c√°ch s·ª≠ d·ª•ng ƒëi·ªán tho·∫°i', 'th√¥ng tin v·ªÅ b·ªánh ti·ªÉu ƒë∆∞·ªùng',
            'ƒë·ªãa ƒëi·ªÉm du l·ªãch g·∫ßn ƒë√¢y', 'c√°ch n·∫•u canh chua', 'th·ªùi ti·∫øt ng√†y mai',
            'tin t·ª©c th·ªÉ thao', 'c√¥ng th·ª©c l√†m b√°nh m√¨', 'ƒë·ªãa ch·ªâ nh√† thu·ªëc',
            'c√°ch s·ª≠ d·ª•ng ·ª©ng d·ª•ng', 'th√¥ng tin v·ªÅ b·ªánh tim', 'ƒë·ªãa ƒëi·ªÉm mua s·∫Øm g·∫ßn ƒë√¢y'
        ]
        
        contents = [
            'nh·∫°c tr·ªØ t√¨nh', 'phim h√†i', 'video h∆∞·ªõng d·∫´n', 'b√†i h√°t m·ªõi', 'tin t·ª©c th·ªùi s·ª±',
            'nh·∫°c v√†ng', 'phim h√†nh ƒë·ªông', 'b√†i h√°t c≈©', 'nh·∫°c bolero', 'phim t√¨nh c·∫£m',
            'video ca nh·∫°c', 'tin t·ª©c th·ªÉ thao', 'nh·∫°c d√¢n ca', 'phim c·ªï trang',
            'b√†i h√°t thi·∫øu nhi', 'video h√†i k·ªãch'
        ]
        
        reminders = [
            'u·ªëng thu·ªëc l√∫c 8h s√°ng', 'h·ªçp gia ƒë√¨nh t·ªëi nay', 'ƒëi kh√°m b·ªánh ng√†y mai',
            'g·ªçi ƒëi·ªán cho con', 'ƒëi ch·ª£ s√°ng mai', 'h·∫πn b√°c sƒ© tu·∫ßn sau',
            'u·ªëng thu·ªëc l√∫c 2h chi·ªÅu', 'ƒëi ch√πa s√°ng mai', 'h·ªçp l·ªõp t·ªëi nay',
            'ƒëi kh√°m rƒÉng tu·∫ßn sau', 'g·ªçi ƒëi·ªán cho ch√°u', 'ƒëi d·∫°o c√¥ng vi√™n chi·ªÅu nay',
            'u·ªëng thu·ªëc l√∫c 9h t·ªëi', 'ƒëi ch·ª£ chi·ªÅu nay', 'h·∫πn b·∫°n c≈© t·ªëi mai'
        ]
        
        times = [
            '8h s√°ng', '9h s√°ng', '10h s√°ng', '2h chi·ªÅu', '3h chi·ªÅu', '4h chi·ªÅu',
            '7h t·ªëi', '8h t·ªëi', '9h t·ªëi', 's√°ng mai', 'chi·ªÅu nay', 't·ªëi nay',
            'ng√†y mai', 'tu·∫ßn sau', 'th√°ng sau', 'b√¢y gi·ªù', 'ngay b√¢y gi·ªù'
        ]
        
        # Intent mapping ƒë·ªÉ tr√°nh l·∫∑p l·∫°i
        intent_mapping = {
            'make-call': 'call',
            'send-message': 'send-mess',
            'make-video-call': 'make-video-call'
        }
        
        # Function ƒë·ªÉ x·ª≠ l√Ω intent mapping
        def process_intent_mapping(intent):
            # Ki·ªÉm tra mapping tr∆∞·ªõc
            if intent in intent_mapping:
                return intent_mapping[intent]
            return intent
        
        for _ in range(num_samples):
            sample = random.choice(data)
            command = sample['command']
            original_text = sample['input']
            
            # S·ª≠ d·ª•ng mapping ƒë·ªÉ x·ª≠ l√Ω intent
            mapped_command = process_intent_mapping(command)
            
            if mapped_command in augmentation_templates:
                template = random.choice(augmentation_templates[mapped_command])
                
                # Replace placeholders with random data
                if '{person}' in template:
                    template = template.replace('{person}', random.choice(persons))
                if '{message}' in template:
                    template = template.replace('{message}', random.choice(messages))
                if '{query}' in template:
                    template = template.replace('{query}', random.choice(queries))
                if '{content}' in template:
                    template = template.replace('{content}', random.choice(contents))
                if '{reminder}' in template:
                    template = template.replace('{reminder}', random.choice(reminders))
                if '{time}' in template:
                    template = template.replace('{time}', random.choice(times))
                
                augmented_sample = {
                    'input': template,
                    'command': mapped_command  # S·ª≠ d·ª•ng mapped command
                }
                augmented.append(augmented_sample)
            else:
                # Fallback: use synonym replacement
                augmented_text = self.replace_synonyms(original_text)
                augmented_sample = {
                    'input': augmented_text,
                    'command': command
                }
                augmented.append(augmented_sample)
        
        return augmented
    
    def replace_synonyms(self, text: str) -> str:
        """Thay th·∫ø t·ª´ ƒë·ªìng nghƒ©a"""
        synonyms = {
            'nh·∫Øn tin': ['g·ª≠i tin nh·∫Øn', 'so·∫°n tin nh·∫Øn', 'vi·∫øt tin nh·∫Øn'],
            'g·ªçi ƒëi·ªán': ['g·ªçi', 'th·ª±c hi·ªán cu·ªôc g·ªçi', 'li√™n l·∫°c'],
            't√¨m ki·∫øm': ['t√¨m', 'tra c·ª©u', 't√¨m hi·ªÉu'],
            'ph√°t': ['b·∫≠t', 'm·ªü', 'ch·∫°y', 'xem'],
            'ƒë·∫∑t nh·∫Øc nh·ªü': ['t·∫°o l·ªùi nh·∫Øc', 'ƒë·∫∑t l·ªãch nh·∫Øc', 't·∫°o nh·∫Øc nh·ªü'],
            'ki·ªÉm tra': ['xem', 'ki·ªÉm tra', 'xem x√©t'],
            'm·ªü': ['b·∫≠t', 'kh·ªüi ƒë·ªông', 'ch·∫°y'],
            't·∫Øt': ['ƒë√≥ng', 'd·ª´ng', 'ng·∫Øt']
        }
        
        for word, syns in synonyms.items():
            if word in text:
                text = text.replace(word, random.choice(syns))
        
        return text
    
    def generate_new_samples(self, data: List[Dict], num_samples: int) -> List[Dict]:
        """T·∫°o samples m·ªõi d·ª±a tr√™n patterns - C·∫£i thi·ªán v·ªõi nhi·ªÅu patterns h∆°n"""
        new_samples = []
        
        # ===== NEW SAMPLE PATTERNS BY COMMAND =====
        patterns = {
            # ===== CALL PATTERNS =====
            'call': [
                'G·ªçi ƒëi·ªán cho {person}',
                'Th·ª±c hi·ªán cu·ªôc g·ªçi ƒë·∫øn {person}',
                'Li√™n l·∫°c v·ªõi {person} qua ƒëi·ªán tho·∫°i',
                'G·ªçi {person} ngay b√¢y gi·ªù',
                'G·ªçi cho {person} l√∫c {time}',
                'G·ªçi ƒëi·ªán tho·∫°i cho {person}',
                'G·ªçi {person} kh·∫©n c·∫•p'
            ],
            'make-call': [
                'G·ªçi ƒëi·ªán cho {person}',
                'Th·ª±c hi·ªán cu·ªôc g·ªçi ƒë·∫øn {person}',
                'Li√™n l·∫°c v·ªõi {person} qua ƒëi·ªán tho·∫°i',
                'G·ªçi {person} ngay b√¢y gi·ªù',
                'G·ªçi cho {person} l√∫c {time}',
                'G·ªçi ƒëi·ªán tho·∫°i cho {person}',
                'G·ªçi {person} kh·∫©n c·∫•p'
            ],
            'make-video-call': [
                'G·ªçi video cho {person}',
                'Th·ª±c hi·ªán cu·ªôc g·ªçi video ƒë·∫øn {person}',
                'G·ªçi FaceTime v·ªõi {person}',
                'G·ªçi video {person} ngay b√¢y gi·ªù',
                'G·ªçi video cho {person} l√∫c {time}',
                'G·ªçi video {person} kh·∫©n c·∫•p'
            ],
            
            # ===== MESSAGE PATTERNS =====
            'send-mess': [
                'Nh·∫Øn tin cho {person} r·∫±ng {message}',
                'G·ª≠i tin nh·∫Øn cho {person} n·ªôi dung {message}',
                'So·∫°n tin nh·∫Øn g·ª≠i {person} v·ªõi n·ªôi dung {message}',
                'Vi·∫øt tin nh·∫Øn cho {person} v·ªÅ {message}',
                'G·ª≠i cho {person} tin nh·∫Øn {message}',
                'Nh·∫Øn tin cho {person} l√† {message}',
                'G·ª≠i tin nh·∫Øn cho {person} r·∫±ng {message}',
                'So·∫°n tin cho {person} n·ªôi dung {message}'
            ],
            'send-message': [
                'Nh·∫Øn tin cho {person} r·∫±ng {message}',
                'G·ª≠i tin nh·∫Øn cho {person} n·ªôi dung {message}',
                'So·∫°n tin nh·∫Øn g·ª≠i {person} v·ªõi n·ªôi dung {message}',
                'Vi·∫øt tin nh·∫Øn cho {person} v·ªÅ {message}',
                'G·ª≠i cho {person} tin nh·∫Øn {message}',
                'Nh·∫Øn tin cho {person} l√† {message}',
                'G·ª≠i tin nh·∫Øn cho {person} r·∫±ng {message}',
                'So·∫°n tin cho {person} n·ªôi dung {message}'
            ],
            
            # ===== SEARCH PATTERNS =====
            'search-content': [
                'T√¨m ki·∫øm {query}',
                'T√¨m th√¥ng tin v·ªÅ {query}',
                'Tra c·ª©u {query}',
                'T√¨m hi·ªÉu v·ªÅ {query}',
                'T√¨m ki·∫øm th√¥ng tin {query}',
                'T√¨m {query} tr√™n internet',
                'Tra c·ª©u th√¥ng tin {query}',
                'T√¨m ki·∫øm {query} tr√™n m·∫°ng'
            ],
            'search-internet': [
                'T√¨m ki·∫øm {query}',
                'T√¨m th√¥ng tin v·ªÅ {query}',
                'Tra c·ª©u {query}',
                'T√¨m hi·ªÉu v·ªÅ {query}',
                'T√¨m ki·∫øm th√¥ng tin {query}',
                'T√¨m {query} tr√™n internet',
                'Tra c·ª©u th√¥ng tin {query}',
                'T√¨m ki·∫øm {query} tr√™n m·∫°ng'
            ],
            
            # ===== MEDIA PATTERNS =====
            'play-content': [
                'Ph√°t {content}',
                'B·∫≠t {content}',
                'M·ªü {content}',
                'Ch·∫°y {content}',
                'Xem {content}',
                'Ph√°t {content} ngay b√¢y gi·ªù',
                'B·∫≠t {content} cho t√¥i',
                'M·ªü {content} ƒë·ªÉ xem'
            ],
            'play-media': [
                'Ph√°t {content}',
                'B·∫≠t {content}',
                'M·ªü {content}',
                'Ch·∫°y {content}',
                'Xem {content}',
                'Ph√°t {content} ngay b√¢y gi·ªù',
                'B·∫≠t {content} cho t√¥i',
                'M·ªü {content} ƒë·ªÉ xem'
            ],
            'play-audio': [
                'Ph√°t {content}',
                'B·∫≠t {content}',
                'M·ªü {content}',
                'Ch·∫°y {content}',
                'Nghe {content}',
                'Ph√°t {content} ngay b√¢y gi·ªù',
                'B·∫≠t {content} cho t√¥i',
                'M·ªü {content} ƒë·ªÉ nghe'
            ],
            
            # ===== REMINDER PATTERNS =====
            'set-reminder': [
                'ƒê·∫∑t nh·∫Øc nh·ªü {reminder}',
                'T·∫°o l·ªùi nh·∫Øc {reminder}',
                'ƒê·∫∑t l·ªãch nh·∫Øc {reminder}',
                'T·∫°o nh·∫Øc nh·ªü cho {reminder}',
                'ƒê·∫∑t b√°o th·ª©c cho {reminder}',
                'Nh·∫Øc nh·ªü {reminder}',
                'ƒê·∫∑t nh·∫Øc nh·ªü {reminder} l√∫c {time}',
                'T·∫°o l·ªùi nh·∫Øc {reminder} cho t√¥i'
            ],
            'set-alarm': [
                'ƒê·∫∑t b√°o th·ª©c {time}',
                'T·∫°o b√°o th·ª©c {time}',
                'ƒê·∫∑t chu√¥ng b√°o th·ª©c {time}',
                'B√°o th·ª©c {time}',
                'ƒê·∫∑t b√°o th·ª©c cho {time}',
                'T·∫°o b√°o th·ª©c cho {time}',
                'ƒê·∫∑t chu√¥ng {time}',
                'B√°o th·ª©c l√∫c {time}'
            ],
            
            # ===== CHECK PATTERNS =====
            'check-weather': [
                'Ki·ªÉm tra th·ªùi ti·∫øt h√¥m nay',
                'Xem d·ª± b√°o th·ªùi ti·∫øt',
                'Th·ªùi ti·∫øt nh∆∞ th·∫ø n√†o',
                'Nhi·ªát ƒë·ªô h√¥m nay bao nhi√™u',
                'Ki·ªÉm tra th·ªùi ti·∫øt',
                'Xem th·ªùi ti·∫øt h√¥m nay',
                'D·ª± b√°o th·ªùi ti·∫øt',
                'Th·ªùi ti·∫øt h√¥m nay ra sao'
            ],
            'check-messages': [
                'Ki·ªÉm tra tin nh·∫Øn t·ª´ {person}',
                'Xem tin nh·∫Øn m·ªõi',
                'ƒê·ªçc tin nh·∫Øn ch∆∞a ƒë·ªçc',
                'Ki·ªÉm tra h·ªôp th∆∞',
                'Xem tin nh·∫Øn',
                'Ki·ªÉm tra tin nh·∫Øn',
                'ƒê·ªçc tin nh·∫Øn',
                'Xem tin nh·∫Øn m·ªõi nh·∫•t'
            ],
            'check-device-status': [
                'Ki·ªÉm tra tr·∫°ng th√°i thi·∫øt b·ªã',
                'Xem tr·∫°ng th√°i ƒëi·ªán tho·∫°i',
                'Ki·ªÉm tra pin ƒëi·ªán tho·∫°i',
                'Xem dung l∆∞·ª£ng b·ªô nh·ªõ',
                'Ki·ªÉm tra k·∫øt n·ªëi m·∫°ng',
                'Xem tr·∫°ng th√°i thi·∫øt b·ªã',
                'Ki·ªÉm tra thi·∫øt b·ªã',
                'Xem th√¥ng tin thi·∫øt b·ªã'
            ],
            'check-health-status': [
                'Ki·ªÉm tra s·ª©c kh·ªèe',
                'Xem t√¨nh tr·∫°ng s·ª©c kh·ªèe',
                'Ki·ªÉm tra nh·ªãp tim',
                'Xem ch·ªâ s·ªë s·ª©c kh·ªèe',
                'Ki·ªÉm tra huy·∫øt √°p',
                'Xem t√¨nh tr·∫°ng s·ª©c kh·ªèe',
                'Ki·ªÉm tra s·ª©c kh·ªèe h√¥m nay',
                'Xem b√°o c√°o s·ª©c kh·ªèe'
            ]
        }
        
        # ===== DATA TEMPLATES FOR NEW SAMPLES =====
        persons = [
            'ch√°u V∆∞∆°ng', 'ch·ªã H∆∞∆°ng', 'anh Nam', 'b√† n·ªôi', '√¥ng n·ªôi', 'm·∫π', 'b·ªë', 
            'em g√°i', 'anh trai', 'con trai', 'con g√°i', 'ch√°u trai', 'ch√°u g√°i',
            'b√† ngo·∫°i', '√¥ng ngo·∫°i', 'ch√∫', 'b√°c', 'c√¥', 'd√¨', 'd∆∞·ª£ng', 'm·ª£',
            'anh r·ªÉ', 'ch·ªã d√¢u', 'em r·ªÉ', 'em d√¢u', 'ch√°u n·ªôi', 'ch√°u ngo·∫°i'
        ]
        
        messages = [
            'chi·ªÅu n√†y ƒë√≥n b√† t·∫°i c√¥ng vi√™n Th·ªëng nh·∫•t l√∫c 16h chi·ªÅu',
            's√°ng mai c√≥ h·∫πn b√°c sƒ©',
            't·ªëi nay v·ªÅ mu·ªôn',
            'ƒë√£ nh·∫≠n ƒë∆∞·ª£c tin nh·∫Øn',
            'nh·ªõ u·ªëng thu·ªëc ƒë√∫ng gi·ªù',
            'c√≥ vi·ªác g·∫•p c·∫ßn li√™n l·∫°c',
            't·ªëi nay s·∫Ω v·ªÅ s·ªõm',
            's√°ng mai ƒëi ch·ª£',
            'chi·ªÅu nay c√≥ h·∫πn b·∫°n',
            't·ªëi nay ƒÉn c∆°m ·ªü nh√†',
            's√°ng mai ƒëi kh√°m b·ªánh',
            'chi·ªÅu nay ƒë√≥n ch√°u ·ªü tr∆∞·ªùng',
            't·ªëi nay xem phim c√πng nhau',
            's√°ng mai ƒëi ch√πa',
            'chi·ªÅu nay ƒëi d·∫°o c√¥ng vi√™n'
        ]
        
        queries = [
            'c√°ch n·∫•u ph·ªü', 'th·ªùi ti·∫øt h√¥m nay', 'tin t·ª©c m·ªõi nh·∫•t', 'c√¥ng th·ª©c l√†m b√°nh',
            'ƒë·ªãa ch·ªâ b·ªánh vi·ªán', 'c√°ch s·ª≠ d·ª•ng ƒëi·ªán tho·∫°i', 'th√¥ng tin v·ªÅ b·ªánh ti·ªÉu ƒë∆∞·ªùng',
            'ƒë·ªãa ƒëi·ªÉm du l·ªãch g·∫ßn ƒë√¢y', 'c√°ch n·∫•u canh chua', 'th·ªùi ti·∫øt ng√†y mai',
            'tin t·ª©c th·ªÉ thao', 'c√¥ng th·ª©c l√†m b√°nh m√¨', 'ƒë·ªãa ch·ªâ nh√† thu·ªëc',
            'c√°ch s·ª≠ d·ª•ng ·ª©ng d·ª•ng', 'th√¥ng tin v·ªÅ b·ªánh tim', 'ƒë·ªãa ƒëi·ªÉm mua s·∫Øm g·∫ßn ƒë√¢y'
        ]
        
        contents = [
            'nh·∫°c tr·ªØ t√¨nh', 'phim h√†i', 'video h∆∞·ªõng d·∫´n', 'b√†i h√°t m·ªõi', 'tin t·ª©c th·ªùi s·ª±',
            'nh·∫°c v√†ng', 'phim h√†nh ƒë·ªông', 'b√†i h√°t c≈©', 'nh·∫°c bolero', 'phim t√¨nh c·∫£m',
            'video ca nh·∫°c', 'tin t·ª©c th·ªÉ thao', 'nh·∫°c d√¢n ca', 'phim c·ªï trang',
            'b√†i h√°t thi·∫øu nhi', 'video h√†i k·ªãch'
        ]
        
        reminders = [
            'u·ªëng thu·ªëc l√∫c 8h s√°ng', 'h·ªçp gia ƒë√¨nh t·ªëi nay', 'ƒëi kh√°m b·ªánh ng√†y mai',
            'g·ªçi ƒëi·ªán cho con', 'ƒëi ch·ª£ s√°ng mai', 'h·∫πn b√°c sƒ© tu·∫ßn sau',
            'u·ªëng thu·ªëc l√∫c 2h chi·ªÅu', 'ƒëi ch√πa s√°ng mai', 'h·ªçp l·ªõp t·ªëi nay',
            'ƒëi kh√°m rƒÉng tu·∫ßn sau', 'g·ªçi ƒëi·ªán cho ch√°u', 'ƒëi d·∫°o c√¥ng vi√™n chi·ªÅu nay',
            'u·ªëng thu·ªëc l√∫c 9h t·ªëi', 'ƒëi ch·ª£ chi·ªÅu nay', 'h·∫πn b·∫°n c≈© t·ªëi mai'
        ]
        
        times = [
            '8h s√°ng', '9h s√°ng', '10h s√°ng', '2h chi·ªÅu', '3h chi·ªÅu', '4h chi·ªÅu',
            '7h t·ªëi', '8h t·ªëi', '9h t·ªëi', 's√°ng mai', 'chi·ªÅu nay', 't·ªëi nay',
            'ng√†y mai', 'tu·∫ßn sau', 'th√°ng sau', 'b√¢y gi·ªù', 'ngay b√¢y gi·ªù'
        ]
        
        commands = list(patterns.keys())
        
        # Intent mapping ƒë·ªÉ tr√°nh l·∫∑p l·∫°i
        intent_mapping = {
            'make-call': 'call',
            'send-message': 'send-mess',
            'make-video-call': 'make-video-call'
        }
        
        # Function ƒë·ªÉ x·ª≠ l√Ω intent mapping
        def process_intent_mapping(intent):
            # Ki·ªÉm tra mapping tr∆∞·ªõc
            if intent in intent_mapping:
                return intent_mapping[intent]
            return intent
        
        for _ in range(num_samples):
            command = random.choice(commands)
            
            # S·ª≠ d·ª•ng mapping ƒë·ªÉ x·ª≠ l√Ω intent
            mapped_command = process_intent_mapping(command)
            
            if mapped_command in patterns:
                pattern = random.choice(patterns[mapped_command])
                
                # Replace placeholders with random data
                if '{person}' in pattern:
                    pattern = pattern.replace('{person}', random.choice(persons))
                if '{message}' in pattern:
                    pattern = pattern.replace('{message}', random.choice(messages))
                if '{query}' in pattern:
                    pattern = pattern.replace('{query}', random.choice(queries))
                if '{content}' in pattern:
                    pattern = pattern.replace('{content}', random.choice(contents))
                if '{reminder}' in pattern:
                    pattern = pattern.replace('{reminder}', random.choice(reminders))
                if '{time}' in pattern:
                    pattern = pattern.replace('{time}', random.choice(times))
                
                new_sample = {
                    'input': pattern,
                    'command': mapped_command  # S·ª≠ d·ª•ng mapped command
                }
                new_samples.append(new_sample)
        
        return new_samples
    
    def save_expanded_data(self, data: List[Dict]):
        """L∆∞u dataset ƒë√£ m·ªü r·ªông v·ªõi error handling"""
        try:
            # T·∫°o th∆∞ m·ª•c n·∫øu ch∆∞a t·ªìn t·∫°i
            self.expanded_file.parent.mkdir(parents=True, exist_ok=True)
            
            with open(self.expanded_file, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
            
            print(f"üíæ Saved expanded dataset to {self.expanded_file}")
            
            # Th·ªëng k√™ command distribution
            command_counts = {}
            for item in data:
                command = item['command']
                command_counts[command] = command_counts.get(command, 0) + 1
            
            print(f"üìà Final command distribution:")
            for command, count in sorted(command_counts.items()):
                percentage = (count / len(data)) * 100
                print(f"   {command}: {count} samples ({percentage:.1f}%)")
                
        except Exception as e:
            print(f"‚ùå Error saving data: {e}")
            print("üîß Please check file permissions and try again")

def main():
    """Main function v·ªõi error handling"""
    print("üöÄ Dataset Expansion for PhoBERT-Large")
    print("=" * 50)
    
    try:
        expander = DatasetExpander()
        
        # Ki·ªÉm tra file g·ªëc c√≥ t·ªìn t·∫°i kh√¥ng
        if not expander.original_file.exists():
            print(f"‚ùå Original file not found: {expander.original_file}")
            print("üîß Please check the file path and try again")
            return
        
        expanded_data = expander.expand_dataset(target_size=1000)
        
        if not expanded_data:
            print("‚ùå No data to save")
            return
        
        expander.save_expanded_data(expanded_data)
        
        print("\nüéâ Dataset expansion completed!")
        print("üìã Next steps:")
        print("   1. Use the expanded dataset for training")
        print("   2. Run: python run_training.py")
        print("   3. The large model will have more data to learn from")
        
    except Exception as e:
        print(f"‚ùå Error in main function: {e}")
        print("üîß Please check the code and try again")

if __name__ == "__main__":
    main()
